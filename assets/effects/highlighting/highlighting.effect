// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md

CCEffect %{
  techniques:
  - name: opaque
    passes:
    # stencil
    - vert: general-vs:vert
      frag: stencil-fs:frag
      #priority: 128
      depthStencilState:
        depthTest: false
        depthWrite: false
        stencilTest: true
        stencilFunc: always
        stencilPassOp: replace
      blendState:
        targets:
        - blend: false
          blendColorMask: none
    #outline
    - vert: highlighting-vs:vert 
      frag: highlighting-fs:frag
      #priority: 128
      depthStencilState:
        depthTest: false
        depthWrite: false
        stencilTest: true
        stencilFunc: not_equal
        stencilPassOp: keep
      properties:
        lineWidth:     { value: 10, target: outlineParams.x }
        depthBias:     { value: 0,  target: outlineParams.y }
        baseColor:     { editor: { type: color } }
      migrations:
        properties:
          lineWidth:   { formerlySerializedAs: outlineParams.x }
          depthBias:   { formerlySerializedAs: outlineParams.y }
}%


CCProgram stencil-fs %{
  precision highp float;

  vec4 frag () {
    vec4 c = vec4(1,1,1,1);
    return c;
  }
}%



CCProgram highlighting-vs %{
precision highp float;
#include <input-standard>
#include <cc-global>
#include <cc-local-batch>

in vec2 a_texCoord;
out vec2 v_uv;

uniform OutlineVert {
  vec4 outlineParams; // x: line width, y: depth hack
};

vec4 vert () {
  StandardVertInput In;
  CCVertInput(In);

  mat4 matWorld;
  CCGetWorldMatrix(matWorld);

  float width = outlineParams.x * 0.001;

  In.position.xyz += normalize(In.normal) * width;
  vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;

  //pos.z -= outlineParams.y * 0.002;

  v_uv = a_texCoord;

  return pos;
}
}%


CCProgram highlighting-fs %{
precision mediump float;
#include <cc-global>
#include <output>

in vec2 v_uv;

uniform OutlineFrag {
  vec4 baseColor;
};

vec4 frag () {
  vec4 color = baseColor * cc_mainLitColor;

  return CCFragOutput(vec4(color.rgb, 1.0));
}
}%


CCProgram unlit-fs %{
  precision highp float;
  #include <output>

  in vec2 v_uv;
  uniform sampler2D mainTexture;

  uniform Constant {
    vec4 mainColor;
  };

  vec4 frag () {
    return CCFragOutput(mainColor * texture(mainTexture, v_uv));
  }
}%
